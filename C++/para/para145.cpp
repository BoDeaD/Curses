#include <iostream>

using namespace std;

int main()
{
    int m1 = 5;
    int m2 = 2;
    int** A = new int* [m1];
    //Инициализация двумерного массива
    for (int i = 0; i < m1; i++)
    {
        A[i] = new int[m2];
    }
    //Удаление двумерного массива(освобождение памяти)
    for (int i = 0; i < m1; i++)
    {
        delete[] A[i];
    }
    delete[] A;


    //Пример использования двумерного массива
int i, j;

// Переменные для описания характеристик массивов.
// m1 — количество строк, m2 — количество столбцов
int m1 = 5, m2 = 5;

/* Организация двумерного динамического массива производится в два этапа.
Сначала создаётся одномерный массив указателей, а затем каждому элементу этого массива присваивается адрес одномерного массива.
Для характеристик размеров массивов не требуется константных выражений.
*/
int** pArr = new int* [m1]; 
for (i = 0; i < m1; i++)
{
    pArr[i] = new int[m2];
}
// Доступ к элементам массива выполняется как обычно
pArr[3][3] = 100;
cout << pArr[3][3] << "\n";

// Последовательное удаление двумерного массива…
for (i = 0; i < m1; i++)
{
    delete[]pArr[i];
}
delete[]pArr;

//двумерный "треугольный" массив
// m1 — количество строк, m2 — количество столбцов
int m1 = 5, m2 = 5;
int i, j, k;
int** pXArr = new int* [m1];
k = m2;

// Организация двумерного динамического массива
for (i = 0; i < m1; i++, k--)
{
    pXArr[i] = new int[k];
}

for (i = 0; i < m1; i++, m2--)
{
    for (j = 0; j < m2; j++)
    {
        // заполнение строки двумерного
        // динамического массива данными и вывод
        pXArr[i][j] = 5;
        cout << pXArr[i][j] << " ";
    }
    cout << "\n";
}

for (i = 0; i < m1; i++)
{
    delete[]pXArr[i];
}
delete[]pXArr; 

int m1 = 5, m2 = 3, m3 = 2;
 int i, j;

 // указатель на указатель на указатель :)
 int*** pXArr = new int** [m1];

 // Организация трехмерного динамического массива
 for (i = 0; i < m1; i++)
 {
     pXArr[i] = new int* [m2]; for (j = 0; j < m2; j++)
     {
         pXArr[i][j] = new int[m3];
     }
 }

 // Доступ к элементам массива
 pXArr[1][2][3] = 750;
 cout << pXArr[1][2][3] << "\n";

 // Удаление в последовательности, обратной созданию
 for (i = 0; i < m1; i++)
 {
     for (j = 0; j < m2; j++)
     {
         delete[]pXArr[i][j];
     }
     delete[]pXArr[i];
 }

 delete[] pXArr;

return 0;
}